# frozen_string_literal: true
require 'ruby_grammar_builder'
require 'walk_up'
require_relative walk_up_until("paths.rb")
require_relative './tokens.rb'

# 
# 
# create grammar!
# 
# 
grammar = Grammar.new(
    name: "F# Templates",
    scope_name: "template.fsharp.injection",
    ending: "", # normally the ending would be .fsharp
    injectionSelector: "L:source.fsharp - (comment, string.quoted.double.fsharp, string.quoted.triple.fsharp)",
    fileTypes: [
    ],
    version: "",
)

# 
#
# (equivlent to textmate's "patterns": [])
#
# 
    grammar[:$initial_context] = [
        :html_injection,
        :sql_injection,
    ]

# 
# patterns (equivlent to textmate's "repository": {})
# 
    grammar[:html_injection] = PatternRange.new(
        start_pattern: Pattern.new(
                tag_as: "punctuation.section.attribute.begin",
                match: Pattern.new(/[ ._]/).then(
                        match: /html|svg/,
                        tag_as: "variable.fsharp"
                    ).maybe(
                        @spaces
                    ).then(
                        # I'm not sure why the literal $ is being looked for
                        lookAheadFor('$').or(@end_of_line)
                    )
            ),
        end_pattern: Pattern.new(
                tag_as: "punctuation.section.attribute.end",
                match: /"/,
                at_least: 3.times,
            ),
        includes: [
            :html_template,
            "source.fsharp",
        ]
    )
    
    grammar[:sql_injection] = PatternRange.new(
        start_pattern: Pattern.new(
                tag_as: "punctuation.section.attribute.begin",
                match: Pattern.new(/[ ._]/).then(
                        match: /sql/,
                        tag_as: "variable.fsharp"
                    ).maybe(
                        @spaces
                    ).then(
                        # I'm not sure why the literal $ is being looked for
                        lookAheadFor('$').or(@end_of_line)
                    )
            ),
        end_pattern: Pattern.new(
                tag_as: "punctuation.section.attribute.end",
                match: /"/,
                at_least: 3.times,
            ),
        includes: [
            :sql_template,
            "source.fsharp",
        ]
    )
    
    grammar[:html_template] = PatternRange.new(
        tag_content_as: "template.fsharp.html",
        start_pattern: Pattern.new('$').then(/"""/),
        end_pattern: lookAheadFor(/"""/),
        patterns: [
            "text.html.derivative"
        ]
    )
    
    grammar[:sql_template] = PatternRange.new(
        tag_content_as: "template.fsharp.html",
        start_pattern: Pattern.new('$').then(/"""/),
        end_pattern: lookAheadFor(/"""/),
        patterns: [
            "source.sql"
        ]
    )

#
# Save
#
name = "template.fsharp.injection"
grammar.save_to(
    syntax_name: name,
    syntax_dir: "./autogenerated",
    tag_dir: "./autogenerated",
)